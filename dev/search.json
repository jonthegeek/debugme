[{"path":[]},{"path":"https://r-lib.github.io/debugme/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://r-lib.github.io/debugme/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://r-lib.github.io/debugme/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://r-lib.github.io/debugme/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://r-lib.github.io/debugme/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://r-lib.github.io/debugme/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://r-lib.github.io/debugme/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://r-lib.github.io/debugme/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://r-lib.github.io/debugme/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://r-lib.github.io/debugme/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://r-lib.github.io/debugme/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://r-lib.github.io/debugme/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 debugme authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://r-lib.github.io/debugme/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gábor Csárdi. Author, maintainer. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://r-lib.github.io/debugme/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Csárdi G (2023). debugme: Debug R Packages. R package version 1.1.0.9001,  https://r-lib.github.io/debugme/, https://github.com/r-lib/debugme#readme.","code":"@Manual{,   title = {debugme: Debug R Packages},   author = {Gábor Csárdi},   year = {2023},   note = {R package version 1.1.0.9001,  https://r-lib.github.io/debugme/},   url = {https://github.com/r-lib/debugme#readme}, }"},{"path":"https://r-lib.github.io/debugme/dev/index.html","id":"debugme","dir":"","previous_headings":"","what":"Debug R Packages","title":"Debug R Packages","text":"Debug R Packages Specify debug messages special string constants, control debugging packages via environment variables. package largely influenced debug npm package.","code":""},{"path":"https://r-lib.github.io/debugme/dev/index.html","id":"installation-and-usage","dir":"","previous_headings":"","what":"Installation and Usage","title":"Debug R Packages","text":"Stable version: install development version: use debugme package, import , add following .onLoad function package: can now add debug messages via character literals. function calls necessary. example: string literals simply ignored debugging turned . turn debugging package, set environment variable DEBUGME package name want debug. E.g. bash shell: within R: Separate multiple package names commas: debug messages prefixed package names, assuming terminal supports color, colored differently package.","code":"install.packages(\"debugme\") pak::pak(\"r-lib/debugme\") .onLoad <- function(libname, pkgname) {   debugme::debugme() } \"!DEBUG Start up phantomjs\" private$start_phantomjs(phantom_debug_level)  \"!DEBUG Start up shiny\" private$start_shiny(path)  \"!DEBUG create new phantomjs session\" private$web <- session$new(port = private$phantom_port)  \"!DEBUG navigate to Shiny app\" private$web$go(private$get_shiny_url()) export DEBUGME=mypackage Sys.setenv(DEBUGME = \"mypackage\") export DEBUGME=mypackage,otherpackage"},{"path":[]},{"path":"https://r-lib.github.io/debugme/dev/index.html","id":"dynamic-code","dir":"","previous_headings":"","what":"Dynamic code","title":"Debug R Packages","text":"debugme debug strings may contain R code backticks. code evaluated runtime, debugging turned . single debug string may contain multiple backticked code chunks:","code":"\"!DEBUG x = `x`, y = `y`\" if (x != y) { ..."},{"path":"https://r-lib.github.io/debugme/dev/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Debug R Packages","text":"always wanted debugging tool * simple use, * can controlled via environment variables, without changing anything packages , * zero impact performance debugging . debugme tool.","code":""},{"path":"https://r-lib.github.io/debugme/dev/index.html","id":"performance","dir":"","previous_headings":"Motivation","what":"Performance","title":"Debug R Packages","text":"Function calls relatively cheap R, still impact. never want worry log messages making code slower, like debugme. debugme debug strings practically performance penalty debugging . simple comparison evaluate debugging overhead function call, f1(), debugging debug strings, f2(), debugging .","code":"debug <- function(msg) { } f1 <- function() {   for (i in 1:100) {     debug(\"foobar\")     # Avoid optimizing away the loop     i <- i + 1   } } f2 <- function() {   for (i in 1:100) {     \"!DEBUG foobar\"     # Avoid optimizing away the loop     i <- i + 1   } } f3 <- function() {   for (i in 1:100) {     # Avoid optimizing away the loop     i <- i + 1   } } microbenchmark::microbenchmark(f1(), f2(), f3()) #> Warning in microbenchmark::microbenchmark(f1(), f2(), f3()): less accurate #> nanosecond times to avoid potential integer overflows #> Unit: microseconds #>  expr    min     lq      mean median     uq      max neval cld #>  f1() 10.332 10.496 103.29499 10.578 10.701 9277.398   100   a #>  f2()  1.394  1.435   8.29676  1.435  1.435  687.406   100   a #>  f3()  1.107  1.189   7.86011  1.189  1.189  667.767   100   a"},{"path":"https://r-lib.github.io/debugme/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Debug R Packages","text":"MIT © Gábor Csárdi","code":""},{"path":"https://r-lib.github.io/debugme/dev/reference/debug.html","id":null,"dir":"Reference","previous_headings":"","what":"Debug message — debug","title":"Debug message — debug","text":"Normally function called directly, debug strings used. See debugme().","code":""},{"path":"https://r-lib.github.io/debugme/dev/reference/debug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debug message — debug","text":"","code":"debug(msg, pkg = environmentName(topenv(parent.frame())), level = 2)"},{"path":"https://r-lib.github.io/debugme/dev/reference/debug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Debug message — debug","text":"msg Message print, character constant. pkg Package name message belongs. Detected automatically. level maximum debug level show message .","code":""},{"path":"https://r-lib.github.io/debugme/dev/reference/debug.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Debug message — debug","text":"Invisibly, message shown, otherwise NULL.","code":""},{"path":"https://r-lib.github.io/debugme/dev/reference/debugme-package.html","id":null,"dir":"Reference","previous_headings":"","what":"debugme: Debug R Packages — debugme-package","title":"debugme: Debug R Packages — debugme-package","text":"Specify debug messages special string constants, control debugging packages via environment variables.","code":""},{"path":[]},{"path":"https://r-lib.github.io/debugme/dev/reference/debugme-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"debugme: Debug R Packages — debugme-package","text":"Maintainer: Gábor Csárdi csardi.gabor@gmail.com contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://r-lib.github.io/debugme/dev/reference/debugme.html","id":null,"dir":"Reference","previous_headings":"","what":"Debug R Packages — debugme","title":"Debug R Packages — debugme","text":"Specify debug messages special string constants, control debugging packages via environment variables.","code":""},{"path":"https://r-lib.github.io/debugme/dev/reference/debugme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debug R Packages — debugme","text":"","code":"debugme(env = topenv(parent.frame()), pkg = environmentName(env))"},{"path":"https://r-lib.github.io/debugme/dev/reference/debugme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Debug R Packages — debugme","text":"env Environment instument debugging . Defaults package environment calling package. pkg Name calling package. default fine almost cases.","code":""},{"path":"https://r-lib.github.io/debugme/dev/reference/debugme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Debug R Packages — debugme","text":"add debugging package, need Import debugme package. Define .onLoad function package, calls debugme. example:   default debugging . turn debugging, set DEBUGME environment variable names packages want debug. Package names can separated commas. environment variable read package loaded, every call debugme(). Example debugme entries:","code":".onLoad <- function(libname, pkgname) { debugme::debugme() } \"!DEBUG Start Shiny app\""},{"path":"https://r-lib.github.io/debugme/dev/reference/debugme.html","id":"dynamic-debug-messsages","dir":"Reference","previous_headings":"","what":"Dynamic debug messsages","title":"Debug R Packages — debugme","text":"often desired debug messages contain values R expressions evaluated runtime. example, starting Shiny app, useful also print path app. Similarly, debugging HTTP response, desired log HTTP status code. debugme allows embedding R code debug messages, within backticks. code evaluated runtime. examples:   Note parsing debug strings code sophisticated currently, embed backticks code .","code":"\"!DEBUG Start Shiny app at `path`\" \"!DEBUG Got HTTP response `httr::status_code(reponse)`\""},{"path":"https://r-lib.github.io/debugme/dev/reference/debugme.html","id":"log-levels","dir":"Reference","previous_headings":"","what":"Log levels","title":"Debug R Packages — debugme","text":"debugme two ways organize log messages log levels: quick informal way, formal one. informal way, can start !DEBUG token multiple ! characters. can select desired level logging via ! characters package name DEBUGME environment variable. E.g. DEBUGME=!!mypackage means debug messages two less ! marks printed. formal way use log level names: \"FATAL\", \"ERROR\", \"WARNING\", \"INFO\", \"DEBUG\", \"VERBOSE\". specify log level message, append log level \"!DEBUG\", dash. E.g.:   select log level package, can specify level either number ! characters, , adding log level suffix package name, separated dash. E.g.:   (Use either methods set log level, mix .)","code":"\"!DEBUG-INFO Just letting you know that...\" Sys.setenv(DEBUGME = \"mypackage-INFO\")"},{"path":"https://r-lib.github.io/debugme/dev/reference/debugme.html","id":"debug-stack","dir":"Reference","previous_headings":"","what":"Debug stack","title":"Debug R Packages — debugme","text":"default debugme prints debug stack beginning debug messages. debug stack contains functions call stack (emit) debug messages. suppress printing call stack set DEBUGME_SHOW_STACK environment variable .","code":""},{"path":"https://r-lib.github.io/debugme/dev/reference/debugme.html","id":"redirecting-the-output","dir":"Reference","previous_headings":"","what":"Redirecting the output","title":"Debug R Packages — debugme","text":"DEBUGME_OUTPUT_FILE environment variable set filename, output written instead standard output stream R process. DEBUGME_OUTPUT_FILE set, DEBUGME_OUTPUT_DIR , log file created , name file contain process id. useful logging several parallel R processes.","code":""},{"path":"https://r-lib.github.io/debugme/dev/reference/handle_dynamic_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle the dynamic code in a debug string — handle_dynamic_code","title":"Handle the dynamic code in a debug string — handle_dynamic_code","text":"Substrings within backticks interpreted code.","code":""},{"path":"https://r-lib.github.io/debugme/dev/reference/handle_dynamic_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle the dynamic code in a debug string — handle_dynamic_code","text":"","code":"handle_dynamic_code(str)"},{"path":"https://r-lib.github.io/debugme/dev/reference/handle_dynamic_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle the dynamic code in a debug string — handle_dynamic_code","text":"str Debug string.","code":""},{"path":"https://r-lib.github.io/debugme/dev/reference/handle_dynamic_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle the dynamic code in a debug string — handle_dynamic_code","text":"language expression string, depending whether string dynamic code.","code":""}]
